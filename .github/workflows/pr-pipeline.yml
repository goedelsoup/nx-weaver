name: Pull Request Pipeline

on:
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened, ready_for_review ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run against'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      run_tests:
        description: 'Run all tests'
        required: true
        default: true
        type: boolean
      run_lint:
        description: 'Run linting'
        required: true
        default: true
        type: boolean
      run_build:
        description: 'Run build'
        required: true
        default: true
        type: boolean
      run_integration_tests:
        description: 'Run integration tests'
        required: true
        default: true
        type: boolean
      run_weaver_tests:
        description: 'Run Weaver integration tests'
        required: true
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Job 1: Setup and Dependencies
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate cache key
        id: cache-key
        run: |
          echo "value=${{ github.sha }}-${{ github.run_id }}" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            .pnpm-store
          key: ${{ runner.os }}-deps-${{ steps.cache-key.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-deps-

  # Job 2: Linting and Code Quality
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_lint || github.event_name == 'pull_request' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting
        run: pnpm lint

      - name: Check formatting
        run: pnpm format:check

      - name: Run type checking
        run: pnpm type-check

  # Job 3: Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_tests || github.event_name == 'pull_request' }}
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test:unit

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '18'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Job 4: Integration Tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_integration_tests || github.event_name == 'pull_request' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run integration tests
        run: pnpm test:integration

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            test-results/
            coverage/

  # Job 5: Weaver Integration Tests (Optional)
  weaver-test:
    name: Weaver Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_weaver_tests }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Run Weaver integration tests
        run: pnpm test:weaver
        env:
          WEAVER_TEST_TIMEOUT: 120000

      - name: Upload Weaver test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: weaver-test-results
          path: |
            .nx-weaver-cache/
            test-results/

  # Job 6: Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [setup, lint, test]
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_build || github.event_name == 'pull_request' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json

  # Job 7: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    if: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

  # Job 8: Summary and Notifications
  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, weaver-test, build, security]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate summary
        run: |
          echo "## Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Jobs Status:" >> $GITHUB_STEP_SUMMARY
          echo "- Lint: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ${{ needs.integration-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Weaver Tests: ${{ needs.weaver-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.lint.result }}" == "success" && "${{ needs.test.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ **Pipeline Status: SUCCESS**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Pipeline Status: FAILED**" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Pipeline Summary')
            );
            
            const summary = `## Pipeline Summary
            
            **Status:** ${context.job === 'success' ? '✅ SUCCESS' : '❌ FAILED'}
            
            **Jobs:**
            - Lint: ${context.job === 'success' ? '✅' : '❌'}
            - Tests: ${context.job === 'success' ? '✅' : '❌'}
            - Build: ${context.job === 'success' ? '✅' : '❌'}
            - Security: ${context.job === 'success' ? '✅' : '❌'}
            
            **Triggered by:** ${context.eventName === 'workflow_dispatch' ? 'Manual' : 'Pull Request'}
            **Environment:** ${context.payload.inputs?.environment || 'development'}`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                comment_id: botComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } 