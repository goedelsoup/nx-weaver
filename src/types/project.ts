import type { WeaverProjectConfig } from './config';

/**
 * Information about a Weaver project.
 *
 * @example
 * ```typescript
 * {
 *   name: "my-api",
 *   path: "/workspace/apps/my-api",
 *   schemaFiles: ["schema.graphql", "types.graphql"],
 *   config: { enabled: true, version: "1.0.0" },
 *   enabled: true,
 *   version: "1.0.0",
 *   lastModified: new Date(),
 *   generatedFiles: ["types.ts", "resolvers.ts"],
 *   cacheEntries: ["generate:abc123", "validate:def456"]
 * }
 * ```
 */
export interface WeaverProject {
  /** Name of the project */
  name: string;

  /** Path to the project directory */
  path: string;

  /** List of schema files in the project */
  schemaFiles: string[];

  /** Weaver configuration for this project */
  config: WeaverProjectConfig;

  /** Whether Weaver is enabled for this project */
  enabled: boolean;

  /** Weaver version used by this project */
  version?: string;

  /** When the project was last modified */
  lastModified: Date;

  /** List of files generated by Weaver */
  generatedFiles?: string[];

  /** List of cache entry keys for this project */
  cacheEntries?: string[];
}

/**
 * Result of project detection operations.
 *
 * @example
 * ```typescript
 * {
 *   projects: [
 *     { name: "my-api", enabled: true, schemaFiles: ["schema.graphql"] },
 *     { name: "my-web", enabled: false, schemaFiles: [] }
 *   ],
 *   totalProjects: 2,
 *   enabledProjects: 1,
 *   disabledProjects: 1,
 *   errors: [],
 *   warnings: ["my-web has no schema files"]
 * }
 * ```
 */
export interface ProjectDetectionResult {
  /** List of detected Weaver projects */
  projects: WeaverProject[];

  /** Total number of projects found */
  totalProjects: number;

  /** Number of enabled projects */
  enabledProjects: number;

  /** Number of disabled projects */
  disabledProjects: number;

  /** List of errors encountered during detection */
  errors: string[];

  /** List of warnings encountered during detection */
  warnings: string[];
}

/**
 * Options for project detection operations.
 *
 * @example
 * ```typescript
 * {
 *   includeDisabled: true,
 *   validateSchemas: true,
 *   maxDepth: 3
 * }
 * ```
 */
export interface ProjectDetectionOptions {
  /** Whether to include disabled projects in results */
  includeDisabled?: boolean;

  /** Whether to validate schema files during detection */
  validateSchemas?: boolean;

  /** Maximum directory depth to search */
  maxDepth?: number;

  /** Patterns to ignore during detection */
  ignorePatterns?: string[];

  /** Whether to follow symbolic links */
  followSymlinks?: boolean;
}

/**
 * Information about a project's Weaver status.
 *
 * @example
 * ```typescript
 * {
 *   project: "my-api",
 *   status: "ready",
 *   lastRun: new Date(),
 *   nextRun: new Date(Date.now() + 3600000),
 *   hasChanges: true,
 *   needsUpdate: false
 * }
 * ```
 */
export interface ProjectStatus {
  /** Name of the project */
  project: string;

  /** Current status of the project */
  status: 'ready' | 'running' | 'error' | 'disabled' | 'unknown';

  /** When the project was last processed */
  lastRun?: Date;

  /** When the project will be processed next (if scheduled) */
  nextRun?: Date;

  /** Whether the project has unprocessed changes */
  hasChanges: boolean;

  /** Whether the project needs to be updated */
  needsUpdate: boolean;

  /** Error message if the project is in error state */
  error?: string;
}

/**
 * Summary of project statistics.
 *
 * @example
 * ```typescript
 * {
 *   totalProjects: 10,
 *   enabledProjects: 8,
 *   disabledProjects: 2,
 *   projectsWithSchemas: 7,
 *   projectsWithErrors: 1,
 *   totalSchemaFiles: 15,
 *   totalGeneratedFiles: 45
 * }
 * ```
 */
export interface ProjectSummary {
  /** Total number of projects */
  totalProjects: number;

  /** Number of enabled projects */
  enabledProjects: number;

  /** Number of disabled projects */
  disabledProjects: number;

  /** Number of projects with schema files */
  projectsWithSchemas: number;

  /** Number of projects with errors */
  projectsWithErrors: number;

  /** Total number of schema files across all projects */
  totalSchemaFiles: number;

  /** Total number of generated files across all projects */
  totalGeneratedFiles: number;
}
